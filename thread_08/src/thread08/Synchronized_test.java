package thread08;
//线程的同步
/*
Java对于多线程的安全问题提供了专业的解决方式:同步机制
方式一：同步代码块
        synchronized(同步监视器){
        //需要同步的代码
        }
        //说明：
        操作共享数据的代码，即为需要被同步的代码---不能多，不能少
        共享数据：多个线程共同操作的变量（数据）---tick就是共享数据
        同步监视器，俗称：锁。任何类的对象都能充当锁
            要求：多个线程必须共用同一把锁
方式二：同步方法
        synchronized还可以放在方法声明中，表示整个方法为同步方法


        同步方法仍然使用同步监视器，只是不显式地说明
        非静态的同步方法，同步监视器是this
        静态的同步方法，同步监视器是当前类本身





同步的方式解决了线程的安全问题--好处
同步代码块的内容，只能有一个线程操作，相当于单线程的过程，效率低--局限性



死锁问题
    不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁
    出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续
    使用同步时，避免出现死锁


 */



public class Synchronized_test {
    public static void main(String[] args) {




    }
}
